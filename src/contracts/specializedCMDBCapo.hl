module specializedCapo

// exports a Datum and Redeemer.  
//! the Datum and Redeemer of specializations
//  MUST include the same enum variants as in this
//  unspecialized version.  if you're specializing 
//  ... and you get a Helios compiler error,
// ... these are the first things you should check!
//! Your specialization MAY include any 
// ... additional functions, imports or methods

import { 
    RelativeDelegateLink,
    requiresValidDelegateOutput
} from CapoDelegateHelpers


import {
    mkTv,
    tvCharter
} from StellarHeliosHelpers

import {
    getOutputForInput,
    outputDatum
} from StellarHeliosHelpers

import {
    BookEntryStruct,
    requiresPageInput,
    requiresAcceptingChangesActivity
} from CMDBController

// struct LocalCapoConfig {
//     openCreate: Bool "@opn"
//     openSuggestion: Bool "@osg"
//     
// }

enum Datum {
    CharterToken {
        govAuthorityLink: RelativeDelegateLink 
        mintDelegateLink: RelativeDelegateLink 
        // config: LocalCapoConfig
    }
    BookEntry {
        ownerAuthority: RelativeDelegateLink
        entry: BookEntryStruct
    }

    //! datum-validation only supports checks of absolute spendability, 
    //  ... and can't check details of the Activity/Redeemer being used.
    func validateSpend(self, ctx: ScriptContext, mph : MintingPolicyHash) -> Bool {
        true ||
        ( 
            self.serialize() /* never */ == ctx.serialize() ||
            mph.serialize() /* never */ == ctx.serialize()  
        )
    } 

    func validateEntry(self, ctx: ScriptContext, mph: MintingPolicyHash) -> Bool{
        self.switch{
            BookEntry{_, entry} => {                
                entry.validate(ctx, mph)
            },
            _ => error("wrong datum type")//"validateEntry only works on BookEntry datum")
        }
    }

    func txnHasUpdateAuthority(self, 
        ownerAuthority: RelativeDelegateLink, 
        oldListing: BookEntryStruct, 
        ctx: ScriptContext,
        mph: MintingPolicyHash
    ) -> Bool {
        self.switch{
            BookEntry{newOwnerAuthority, bookEntry} => {
                hasCollabToken : Bool = (
                    ownerAuthority.uutName.starts_with("collab-") &&
                    requiresValidDelegateOutput(ownerAuthority, mph, ctx, false)
                );

                editorRequired : Option[String] = 
                    //! if the entryType is changing to "pg", requires editor authority.
                    if (oldListing.entryType == "spg" && bookEntry.entryType == "pg") { 
                        Option[String]::Some{"change from spg to pg"}
                    } else {
                        //! if the owner is changing, requires editor authority 
                        if (ownerAuthority.uutName != newOwnerAuthority.uutName) { 
                            error("todo: fixme")
                            //!!! TODO: ... and ref-input to new owner-UUT.
                            // Option[String]::Some{"change ownership"}
                        } else { Option[String]::None }
                    };

                charterData : Option[Datum::CharterToken] = self.hasCharterRefInput(ctx, mph);

                // determine if the editor authority needs to be used here:
                wantsEditor : Bool = editorRequired.switch{
                    Some => true, // editor required
                    None => if (hasCollabToken) {
                        print("editor not required; we have a good collab-* authority");
                        false 
                    } else {
                        print( "doc owner "+ ownerAuthority.uutName +" missing; requiring editor authority for update" );
                        true // editor is needed if the document owner isn't involved.
                    }
                };
                hasSufficientAuthority : Bool = if (wantsEditor) {
                    charterData.switch{
                        Some{Datum::CharterToken{govAuthority, _}} => {
                            print("using editor's govAuthority for doc update ");
                            // print(editorRequired.unwrap().show());
                            requiresValidDelegateOutput(govAuthority, mph, ctx)                                
                        },
                        None => {
                            print("no charter-ref; can't resolve editor-authority");
                            error("no collaborator token, no editor-authority")
                        }
                    }
                } else {
                    assert(hasCollabToken, "no authority provided for doc update");
                    hasCollabToken
                };

                hasSufficientAuthority
            }, 
            _ => error("wrong datum type")//"txnHasUpdateAuthority only works on BookEntry datum")
        } || (
            self.serialize() /* never */ == ctx.serialize() &&
            self.serialize() /* never */ == mph.serialize()
        )
    }

    func txnHasCreateAuthority(self, ctx: ScriptContext, mph: MintingPolicyHash) -> Bool {
        self.switch{
            BookEntry{entryOwnerAuthority, bookEntry} => {

                //! creating any entry needs a collab- token
                hasCollabToken : Bool = (
                    entryOwnerAuthority.uutName.starts_with("collab-") &&
                    requiresValidDelegateOutput(entryOwnerAuthority, mph, ctx)
                );
                print("bookEntry.entryType is " + bookEntry.entryType);

                //! creating a Page needs Editor authority
                hasAuthorityForEntryType : Bool = if (bookEntry.entryType == "pg") {
                    charterData : Option[Datum::CharterToken] = self.hasCharterRefInput(ctx, mph);
                    charterData.switch{
                        Some{Datum::CharterToken{govAuthority, _}} => {
                            print("using editor's govAuthority for doc update");
                            requiresValidDelegateOutput(govAuthority, mph, ctx)
                        },
                        _ => error("insufficient authority to create entryType=pg")
                    }
                } else { hasCollabToken };

                hasCollabToken && hasAuthorityForEntryType
            },
            _ => error("no create authority on non-book-entry")
        } || (
            self.serialize() /* never */ == ctx.serialize()
        )
    }

    func hasCharterRefInput(
        self,
        ctx: ScriptContext, 
        mph : MintingPolicyHash
    ) -> Option[Datum::CharterToken] {
        chVal : Value = tvCharter(mph);
        hasCharter = (txin : TxInput) -> Bool { txin.value.contains(chVal) };

        assert(
            self.serialize() != ctx.serialize() &&
            self.serialize() != mph.serialize(), "never thrown"
        );

        ctx.tx.ref_inputs.find_safe(hasCharter).switch{
            Some{txin} => Option[Datum::CharterToken]::Some{
                Datum::from_data( 
                    txin.datum.get_inline_data() 
                ).switch{
                    c : CharterToken => c,
                    _ => error("wrong enum")
                }
            },
            None => Option[Datum::CharterToken]::None
        }
    }
    
}
func hasCharterRefInput(
    ctx: ScriptContext, 
    mph : MintingPolicyHash
) -> Option[Datum::CharterToken] {
    chVal : Value = tvCharter(mph);
    hasCharter = (txin : TxInput) -> Bool { txin.value.contains(chVal) };
    
    ctx.tx.ref_inputs.find_safe(hasCharter).switch{
        Some{txin} => Option[Datum::CharterToken]::Some{
            Datum::from_data( 
                txin.datum.get_inline_data() 
            ).switch{
                c : CharterToken => c,
                _ => error("wrong enum")
            }
        },
        None => Option[Datum::CharterToken]::None
    }
}
enum Activity {
    // standard redeemer types:
    updatingCharter    // 0
    usingAuthority      //  1
    //custom redeemer types:
    //xxx registeringEntry - can't be from this script unless there's a spend.

    // writing changes to a 'pg' or 'spg' entry
    updatingEntry    // 2 - an edit is being applied directly to a page or suggestion record.
    acceptingChanges // 3 - a page is accepting one or more change-suggestions

    // closing out suggestions by accepting or rejecting
    suggestionBeingAccepted  // 4 - a suggestion record is being accepted (and its uut burned)
    suggestionBeingRejected // 5 - a suggestion record is being rejected (and its uut burned)
    // removing an obsolete page
    retiringPage  // 6

    func allowRetiringPage(self, datum: Datum, ctx: ScriptContext, mph: MintingPolicyHash) -> Bool {
        // rc -> if is severely outdated, burn the UUT and allow minUtxo recovery
        false && ( 
            self.serialize() /* never */ == datum.serialize()  ||
            self.serialize() /* never */ == mph.serialize()  ||
            self.serialize() /* never */ == ctx.serialize() 
        )
    }

    func allowUpdatingEntry(self, ownerAuthority: RelativeDelegateLink, oldListing: BookEntryStruct, ctx: ScriptContext, mph: MintingPolicyHash) -> Bool {
        txnTime : TimeRange = ctx.tx.time_range;        
        newTxo : TxOutput = getOutputForInput(ctx, ctx.get_current_input());
        // already checked by getOutputForInput()
        // assert(newTxo.value.get_assets().to_map().length == 1, "invalid token bundle with various assets");
        // assert(newTxo.value.get_policy(mph).length == 1, "invalid with multiple tokens in the utxo");

        //!!! todo: require charterDatum in refUtxo (if expected editing delegate not there)
        //    OR - require delegate as below if charterDatum is not found in refUtxo
        // if not using editing delegate, require charterAuth instead
     
        newDatum : Datum = outputDatum[Datum](newTxo);
        Datum::BookEntry{newAuthority, newListing} = newDatum;
        assert(newAuthority == ownerAuthority, "authority change invalid");

        // createdAt: Int
        assert(newListing.createdAt == oldListing.createdAt, "createdAt must not be modified");
        // updatedAt: Int
        assert(txnTime.contains(Time::new(newListing.updatedAt)), "incorrect updatedAt");
        // expiresAt: Int
        assert(Time::new(newListing.expiresAt) < Time::new(newListing.updatedAt) + (365 * Duration::DAY),
            "expiry must be less than 1y"
        );
        // lastExpiredAt: Int
    
        assert(newListing.updatedBy.starts_with("collab-"), "updatedBy must be a collab-* token");
        // check that the transaction has the collab-* token as an input
        correctUpdatedBy: Bool = requiresValidDelegateOutput(
            RelativeDelegateLink{newListing.updatedBy, "address", Option[ValidatorHash]::None}, 
            mph, ctx, false
        );

        
        datumCanUpdate : Bool = newDatum.txnHasUpdateAuthority(ownerAuthority, oldListing, ctx, mph);
        assert(datumCanUpdate, "no update authority in txn");

        // charterData : Option[Datum::CharterToken] = hasCharterRefInput(ctx, mph);
        // availableAuthority : RelativeDelegateLink = charterData.switch{
        //     Some{Datum::CharterToken{govAuthority, _}} => {
        //         print("using editor's govAuthority for doc update");
        //         govAuthority
        //     },
        //     None => {
        //         print("no charter-ref; requiring document-owner authority for doc update");
        //         ownerAuthority
        //     }
        // };
        // hasSufficientAuthority : Bool = requiresValidDelegateOutput(availableAuthority, mph, ctx);

        ( 
            datumCanUpdate  &&
            correctUpdatedBy &&
            newDatum.validateEntry(ctx, mph) 
        ) ||
        ( 
            ( self.serialize() /* never */ == oldListing.serialize() )  ||
            (  self.serialize() /* never */ == ctx.serialize()  )
        )
    }

    func allowMergingChanges(
        self, 
        ownerAuthority: RelativeDelegateLink, 
        oldListing: BookEntryStruct, 
        ctx: ScriptContext, 
        mph: MintingPolicyHash,
        peid: String,
        eids: []String
    ) -> Bool {
        // includes the change's eid-* token in the entry's mergedChanges field
        //!!! verify it burns all the accepted changes (from eids list)
        //    // no need to check that it spends the change's eid-* token (
        //    // (implied by the burn check) 
        // // it has a refUtxo for the charterAuthority (so the mintDelegate can be checked)
        // // includes the mint delegate
        // has a refUtxo for the suggestion's ownerAuthority
        // returns the change's minUtxo to the suggester (via the refUtxo's address)
        
        isAcceptingChangeIds : Bool = eids.length > 1;
        // charterData : Option[Datum::CharterToken] = self.hasCharterRefInput(ctx, mph).switch


        self == self && 
        ownerAuthority == ownerAuthority && 
        oldListing  == oldListing &&
        ctx == ctx &&
        mph     == mph &&
        eids == eids &&
        peid == peid &&

        // should burn the eids (this is handled directly by each 'sug' record's suggestionBeingAccepted activity
        // should have the eids in ctx.tx.inputs
        isAcceptingChangeIds &&
        false
    }

    //! called by the base minting policy when a custom activity is used
    //  for spending a Utxo held in this capo's script address    
    func allowActivity(self, datum: Datum, ctx: ScriptContext, mph: MintingPolicyHash) -> Bool {
        //! Note: an overridden Reedeemer def doesn't have to replicate the checks
        // ... for the baseline Activity enum variants; it's not called in those cases.

        txnTime : TimeRange = ctx.tx.time_range;        
        assert(/* ✅ limited txn validity */ 
            (txnTime.end - txnTime.start) < 1 * Duration::HOUR, 
            "bad validity"
            // + ": validity period must be less than 1h"); 
        );

        datum.switch{
            BookEntry{ownerAuthority, entry} => {
                self.switch{
                    updatingEntry => {
                        self.allowUpdatingEntry(ownerAuthority, entry, ctx, mph)
                    },
                    suggestionBeingAccepted => {
                        assert(entry.entryType == "sug", "invalid entry type for suggestionBeingAccepted");
                        peid : String = entry.changeParentEid.switch{
                            Some{eid} => eid,
                            None => error("invalid suggestion without changeParentEid")
                        };
                        (_, pageUtxo : TxInput) = requiresPageInput(
                            ctx, mph, peid
                        );
                        // enforces that the parent-page is currently updating with acceptingChanges activity
                        requiresAcceptingChangesActivity(ctx, pageUtxo) &&
                        // main record's acceptingChanges() activity checks that the change record UUT is burned (
                        // todo: the page must include this change suggestion's eid-* token in its acceptingChanges field
                        true
                    },
                    suggestionBeingRejected => {
                        // self.allowUpdatingEntry(ownerAuthority, entry, ctx, mph) &&
                        // self.dustPaidToOwner(ownerAuthority, entry, ctx, mph, eids) &&
                        // self.burnedChangeEntry()
                        true
                    },
                    acceptingChanges => {
                        eids: []String = entry.appliedChanges;
                        pgVal : Map[ByteArray]Int = ctx.
                            get_current_input().
                            value.get_policy(mph);

                        assert(pgVal.length == 1, "invalid contract utxo with coalesced entries");
                        peid : String = pgVal.head_key.decode_utf8();

                        self.allowUpdatingEntry(ownerAuthority, entry, ctx, mph) &&
                        self.allowMergingChanges(ownerAuthority, entry, ctx, mph, peid, eids)
                    },
                    retiringPage => self.allowRetiringPage(datum, ctx, mph),
                    // registeringEntry => assert(false, "unreachable code"),
                    _ => error("unreachable code")
                }
               // not executed, but prevents the args from showing up as unused:
                || ( ownerAuthority.serialize() != entry.serialize() )
            },
            _ => error("unhandled datum type")
            // not executed, but prevents the args from showing up as unused:
        } || ( ctx.tx.serialize() /* never */ == datum.serialize() )
    }
}

struct typeInfo {
    bookEntryStruct: BookEntryStruct
    datum: Datum
    redeemers: Activity
}
const types : typeInfo = typeInfo {
    BookEntryStruct::from_data(Data{}),
    Datum::from_data(Data{}),
    Activity::from_data(Data{})
}